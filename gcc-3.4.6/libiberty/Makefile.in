#
# Makefile
#   Copyright (C) 1990, 91-99, 2000, 2001, 2002, 2003, 2004
#   Free Software Foundation
#
# This file is part of the libiberty library.
# Libiberty is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# Libiberty is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with libiberty; see the file COPYING.LIB.  If not,
# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#

# This file was written by K. Richard Pixley <rich@cygnus.com>.

#
# Makefile for libiberty directory
#

ifeq ($(objext),)
objext = o
endif

ifeq ($(objext),o)
cc_flag = -c
else
cc_flag = -S
endif

libiberty_topdir = @libiberty_topdir@
srcdir = @srcdir@
VPATH = @srcdir@

prefix = @prefix@

exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
target_header_dir = @target_header_dir@

SHELL = @SHELL@

# Multilib support variables.
MULTISRCTOP =
MULTIBUILDTOP =
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
mkinstalldirs = $(SHELL) $(libiberty_topdir)/mkinstalldirs

# Some compilers can't handle cc -c blah.c -o foo/blah.o.
OUTPUT_OPTION = @OUTPUT_OPTION@

AR = @AR@
AR_FLAGS = rc

CC = @CC@
CFLAGS = @CFLAGS@
LIBCFLAGS = $(CFLAGS)
RANLIB = @RANLIB@
MAKEINFO = @MAKEINFO@
PERL = @PERL@

PICFLAG =

MAKEOVERRIDES =

TARGETLIB = libiberty.a
TESTLIB = testlib.a

LIBOBJS = @LIBOBJS@

# A configuration can specify extra .o files that should be included,
# even if they are in libc. (Perhaps the libc version is buggy.)
EXTRA_OFILES = 

# Flags to pass to a recursive make.
FLAGS_TO_PASS = \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"DESTDIR=$(DESTDIR)" \
	"LIBCFLAGS=$(LIBCFLAGS)" \
	"EXTRA_OFILES=$(EXTRA_OFILES)" \
	"HDEFINES=$(HDEFINES)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"LDFLAGS=$(LDFLAGS)" \
	"LOADLIBES=$(LOADLIBES)" \
	"RANLIB=$(RANLIB)" \
	"SHELL=$(SHELL)" \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"libdir=$(libdir)" \
	"libsubdir=$(libsubdir)" \
	"tooldir=$(tooldir)"

# Subdirectories to recurse into. We need to override this during cleaning
SUBDIRS = testsuite

# FIXME: add @BUILD_INFO@ once we're sure it works for everyone.
all: stamp-picdir $(TARGETLIB) needed-list required-list all-subdir
	@: $(MAKE) ; exec $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all

.PHONY: check installcheck
check: check-subdir
installcheck: installcheck-subdir

@host_makefile_frag@

INCDIR=$(srcdir)/$(MULTISRCTOP)../include

COMPILE.c = $(CC) $(cc_flag) @DEFS@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES) @ac_libiberty_warn_cflags@
COMPILE.s = $(CC) -S @DEFS@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES) @ac_libiberty_warn_cflags@
.c.o:
	if [ x"$(PICFLAG)" != x ]; then \
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@; \
	else true; fi
	$(COMPILE.c) $< $(OUTPUT_OPTION)

.c.s:
	if [ x"$(PICFLAG)" != x ]; then \
	  $(COMPILE.c) $(PICFLAG) $< -o pic/$@; \
	else true; fi
	$(COMPILE.c) $< $(OUTPUT_OPTION)

# NOTE: If you add new files to the library, add them to this list
# (alphabetical), and add them to REQUIRED_OFILES, or
# CONFIGURED_OFILES and funcs in configure.ac.
CFILES = alloca.c argv.c asprintf.c atexit.c				\
	basename.c bcmp.c bcopy.c bsearch.c bzero.c			\
	calloc.c choose-temp.c clock.c concat.c cp-demangle.c		\
	cp-demint.c cplus-dem.c						\
	dyn-string.c							\
	fdmatch.c ffs.c fibheap.c floatformat.c fnmatch.c		\
	getcwd.c getopt.c getopt1.c getpagesize.c getpwd.c getruntime.c	\
	hashtab.c hex.c							\
	index.c insque.c						\
	lbasename.c							\
	lrealpath.c							\
	make-relative-prefix.c						\
	make-temp-file.c md5.c memchr.c memcmp.c memcpy.c memmove.c	\
	 mempcpy.c memset.c mkstemps.c					\
	objalloc.c obstack.c						\
	partition.c							\
	 pex-djgpp.c pex-mpw.c pex-msdos.c pex-os2.c			\
	 pex-unix.c pex-win32.c						\
         physmem.c putenv.c						\
	random.c regex.c rename.c rindex.c				\
	safe-ctype.c setenv.c sigsetmask.c snprintf.c sort.c spaces.c	\
	 splay-tree.c stpcpy.c stpncpy.c strcasecmp.c strchr.c strdup.c	\
	 strerror.c strncasecmp.c strncmp.c strrchr.c strsignal.c	\
	 strstr.c strtod.c strtol.c strtoul.c				\
	ternary.c tmpnam.c						\
	vasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c	\
	waitpid.c							\
	xatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c

# These are always included in the library.  The first four are listed
# first and by compile time to optimize parallel builds.
REQUIRED_OFILES = regex.$(objext) cplus-dem.$(objext) cp-demangle.$(objext) cp-demint.$(objext) md5.$(objext)	\
	alloca.$(objext) argv.$(objext)							\
	choose-temp.$(objext) concat.$(objext)						\
	dyn-string.$(objext)							\
	fdmatch.$(objext) fibheap.$(objext) floatformat.$(objext) fnmatch.$(objext)			\
	getopt.$(objext) getopt1.$(objext) getpwd.$(objext) getruntime.$(objext)			\
	hashtab.$(objext) hex.$(objext)							\
	lbasename.$(objext)							\
	lrealpath.$(objext)							\
	make-relative-prefix.$(objext)						\
	make-temp-file.$(objext)						\
	objalloc.$(objext) obstack.$(objext)						\
	partition.$(objext) physmem.$(objext) @pexecute@						\
	safe-ctype.$(objext) sort.$(objext) spaces.$(objext) splay-tree.$(objext) strerror.$(objext)		\
	 strsignal.$(objext)							\
	ternary.$(objext)							\
	xatexit.$(objext) xexit.$(objext) xmalloc.$(objext) xmemdup.$(objext) xstrdup.$(objext) xstrerror.$(objext)

# These are all the objects that configure may add to the library via
# $funcs or EXTRA_OFILES.  This list exists here only for "make
# maint-missing" and "make check".
CONFIGURED_OFILES = asprintf.$(objext) atexit.$(objext)					\
	basename.$(objext) bcmp.$(objext) bcopy.$(objext) bsearch.$(objext) bzero.$(objext)			\
	calloc.$(objext) clock.$(objext) copysign.$(objext)					\
	_doprnt.$(objext)							\
	ffs.$(objext)								\
	getcwd.$(objext) getpagesize.$(objext)						\
	index.$(objext) insque.$(objext)						\
	memchr.$(objext) memcmp.$(objext) memcpy.$(objext) memmove.$(objext) mempcpy.$(objext) memset.$(objext) mkstemps.$(objext) \
	pex-djgpp.$(objext) pex-mpw.$(objext) pex-msdos.$(objext) pex-os2.$(objext)			\
	 pex-unix.$(objext) pex-win32.$(objext)						\
	 putenv.$(objext)							\
	random.$(objext) rename.$(objext) rindex.$(objext)					\
	setenv.$(objext) sigsetmask.$(objext) snprintf.$(objext) stpcpy.$(objext) stpncpy.$(objext) strcasecmp.$(objext) \
	 strchr.$(objext) strdup.$(objext) strncasecmp.$(objext) strncmp.$(objext) strrchr.$(objext) strstr.$(objext)	\
	 strtod.$(objext) strtol.$(objext) strtoul.$(objext)					\
	tmpnam.$(objext)							\
	vasprintf.$(objext) vfork.$(objext) vfprintf.$(objext) vprintf.$(objext) vsnprintf.$(objext) vsprintf.$(objext)	\
	waitpid.$(objext)

# These files are installed if the library has been configured to do so.
INSTALLED_HEADERS =                                                     \
	$(INCDIR)/ansidecl.h                                            \
	$(INCDIR)/demangle.h                                            \
	$(INCDIR)/dyn-string.h                                          \
	$(INCDIR)/fibheap.h                                             \
	$(INCDIR)/floatformat.h                                         \
	$(INCDIR)/hashtab.h                                             \
	$(INCDIR)/libiberty.h                                           \
	$(INCDIR)/objalloc.h                                            \
	$(INCDIR)/partition.h                                           \
	$(INCDIR)/safe-ctype.h                                          \
	$(INCDIR)/sort.h                                                \
	$(INCDIR)/splay-tree.h                                          \
	$(INCDIR)/ternary.h

$(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)
	-rm -f $(TARGETLIB) pic/$(TARGETLIB)
	$(AR) $(AR_FLAGS) $(TARGETLIB) \
	  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)
	$(RANLIB) $(TARGETLIB)
	if [ x"$(PICFLAG)" != x ]; then \
	  cd pic; \
	  $(AR) $(AR_FLAGS) $(TARGETLIB) \
	    $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS); \
	  $(RANLIB) $(TARGETLIB); \
	  cd ..; \
	else true; fi

$(TESTLIB): $(REQUIRED_OFILES) $(CONFIGURED_OFILES)
	-rm -f $(TESTLIB)
	$(AR) $(AR_FLAGS) $(TESTLIB) \
	  $(REQUIRED_OFILES) $(CONFIGURED_OFILES)
	$(RANLIB) $(TESTLIB)

info: libiberty.info info-subdir
install-info: install-info-subdir
clean-info: clean-info-subdir
dvi: libiberty.dvi dvi-subdir
html: libiberty.html

TEXISRC = \
	$(srcdir)/libiberty.texi \
	$(srcdir)/copying-lib.texi \
	$(srcdir)/obstacks.texi \
	$(srcdir)/functions.texi

# Additional files that have texi snippets that need to be collected
# and sorted.  Some are here because the sources are imported from
# elsewhere.  Others represent headers in ../include.
TEXIFILES = fnmatch.txh pexecute.txh

libiberty.info : $(srcdir)/libiberty.texi $(TEXISRC)
	$(MAKEINFO) -I$(srcdir) $(srcdir)/libiberty.texi

libiberty.dvi : $(srcdir)/libiberty.texi $(TEXISRC)
	texi2dvi $(srcdir)/libiberty.texi

libiberty.html : $(srcdir)/libiberty.texi $(TEXISRC)
	$(MAKEINFO) --html -I$(srcdir) $(srcdir)/libiberty.texi

@MAINT@$(srcdir)/functions.texi : stamp-functions
@MAINT@	@true

@MAINT@stamp-functions : $(CFILES) $(TEXIFILES) $(srcdir)/gather-docs Makefile
@MAINT@@HAVE_PERL@	$(PERL) $(srcdir)/gather-docs $(srcdir) $(srcdir)/functions.texi $(CFILES) $(TEXIFILES)
@MAINT@	echo stamp > stamp-functions

INSTALL_DEST = @INSTALL_DEST@
install: install_to_$(INSTALL_DEST) install-subdir

install_to_libdir: all
	${mkinstalldirs} $(DESTDIR)$(libdir)$(MULTISUBDIR)
	$(INSTALL_DATA) $(TARGETLIB) $(DESTDIR)$(libdir)$(MULTISUBDIR)/$(TARGETLIB)n
	( cd $(DESTDIR)$(libdir)$(MULTISUBDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(DESTDIR)$(libdir)$(MULTISUBDIR)/$(TARGETLIB)n $(DESTDIR)$(libdir)$(MULTISUBDIR)/$(TARGETLIB)
	if test -n "${target_header_dir}"; then \
	  case "${target_header_dir}" in \
	    /*)    thd=${target_header_dir};; \
	    *)     thd=${includedir}${MULTISUBDIR}/${target_header_dir};; \
	  esac; \
	  ${mkinstalldirs} $(DESTDIR)$${thd}; \
	  for h in ${INSTALLED_HEADERS}; do \
	    ${INSTALL_DATA} $$h $(DESTDIR)$${thd}; \
	  done; \
	fi
	@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

# This is tricky.  Even though CC in the Makefile contains
# multilib-specific flags, it's overridden by FLAGS_TO_PASS from the
# default multilib, so we have to take LIBCFLAGS into account as well,
# since it will be passed the multilib flags.
MULTIOSDIR = `$(CC) $(LIBCFLAGS) -print-multi-os-directory`
install_to_tooldir: all
	${mkinstalldirs} $(DESTDIR)$(tooldir)/lib/$(MULTIOSDIR)
	$(INSTALL_DATA) $(TARGETLIB) $(DESTDIR)$(tooldir)/lib/$(MULTIOSDIR)/$(TARGETLIB)n
	( cd $(DESTDIR)$(tooldir)/lib/$(MULTIOSDIR) ; $(RANLIB) $(TARGETLIB)n )
	mv -f $(DESTDIR)$(tooldir)/lib/$(MULTIOSDIR)/$(TARGETLIB)n $(DESTDIR)$(tooldir)/lib/$(MULTIOSDIR)/$(TARGETLIB)
	@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install

# needed-list is used by libstdc++.  NEEDED is the list of functions
# to include there.  Do not add anything LGPL to this list; libstdc++
# can't use anything encumbering.
NEEDED = atexit calloc memchr memcmp memcpy memmove memset rename strchr \
	 strerror strncmp strrchr strstr strtol strtoul tmpnam vfprintf vprintf \
	 vfork waitpid bcmp bcopy bzero
needed-list: Makefile
	rm -f needed-list; touch needed-list; \
	for f in $(NEEDED); do \
	  for g in $(LIBOBJS) $(EXTRA_OFILES); do \
	    case "$$g" in \
	      *$$f*) echo $$g >> needed-list ;; \
	    esac; \
	  done; \
	done

# required-list was used when building a shared bfd/opcodes/libiberty
# library.  I don't know if it used by anything currently.
required-list: Makefile
	echo $(REQUIRED_OFILES) > required-list

stamp-picdir:
	if [ x"$(PICFLAG)" != x ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

.PHONY: all etags tags ls clean stage1 stage2

etags tags: TAGS etags-subdir

TAGS: $(CFILES)
	etags `for i in $(CFILES); do echo $(srcdir)/$$i ; done`

# The standalone demangler (c++filt) has been moved to binutils.
demangle:
	@echo "The standalone demangler, now named c++filt, is now"
	@echo "a part of binutils."
	@false

ls:
	@echo Makefile $(CFILES)

# Various targets for maintainers.

maint-missing :
	@$(PERL) $(srcdir)/maint-tool -s $(srcdir) missing $(CFILES) $(REQUIRED_OFILES) $(CONFIGURED_OFILES)

maint-buildall : $(REQUIRED_OFILES) $(CONFIGURED_OFILES)
	@true

maint-undoc : $(srcdir)/functions.texi
	@$(PERL) $(srcdir)/maint-tool -s $(srcdir) undoc

maint-deps :
	@$(PERL) $(srcdir)/maint-tool -s $(srcdir) deps $(INCDIR)

# Need to deal with profiled libraries, too.

# Cleaning has to be done carefully to ensure that we don't clean our SUBDIRS
# multiple times, hence our explicit recursion with an empty SUBDIRS.
mostlyclean: mostlyclean-subdir
	-rm -rf *.$(objext) pic core errs \#* *.E a.$(objext)ut
	-rm -f needed.awk needed2.awk errors dummy needed-list config.h stamp-*
	-rm -f $(CONFIG_H) $(NEEDED_LIST) stamp-picdir
	-rm -f libiberty.aux libiberty.cp libiberty.cps libiberty.fn libiberty.ky
	-rm -f libiberty.log libiberty.tmp libiberty.tps libiberty.pg
	-rm -f libiberty.pgs libiberty.toc libiberty.tp libiberty.tpl libiberty.vr
	-rm -f libtexi.stamp
	@$(MULTICLEAN) multi-clean DO=mostlyclean
clean: clean-subdir
	$(MAKE) SUBDIRS="" mostlyclean
	-rm -f *.a required-list tmpmulti.$(objext)ut
	-rm -f libiberty.dvi libiberty.info* libiberty.html
	@$(MULTICLEAN) multi-clean DO=clean
distclean: distclean-subdir
	$(MAKE) SUBDIRS="" clean
	@$(MULTICLEAN) multi-clean DO=distclean
	-rm -f *~ Makefile config.cache config.status xhost-mkfrag TAGS multilib.$(objext)ut
	-rm -f config.log
	-rmdir testsuite 2>/dev/null
maintainer-clean realclean: maintainer-clean-subdir
	$(MAKE) SUBDIRS="" distclean

force:

Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

# Depending on Makefile makes sure that config.status has been re-run
# if needed.  This prevents problems with parallel builds.
config.h: stamp-h ; @true
stamp-h: config.in config.status Makefile
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: $(srcdir)/configure $(srcdir)/config.table
	$(SHELL) ./config.status --recheck

# Depending on config.h makes sure that config.status has been re-run
# if needed.  This prevents problems with parallel builds, in case
# subdirectories need to run config.status also.
all-subdir check-subdir installcheck-subdir info-subdir	\
install-info-subdir clean-info-subdir dvi-subdir install-subdir	\
etags-subdir mostlyclean-subdir clean-subdir distclean-subdir \
maintainer-clean-subdir: config.h
	@subdirs='$(SUBDIRS)'; \
	target=`echo $@ | sed -e 's/-subdir//'`; \
	for dir in $$subdirs ; do \
	  cd $$dir && $(MAKE) $(FLAGS_TO_PASS) $$target; \
	done

$(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS): stamp-picdir
$(CONFIGURED_OFILES): stamp-picdir

# The dependencies in the remainder of this file are automatically
# generated by "make maint-deps".  Manual edits will be lost.

_doprnt.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
alloca.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
argv.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
asprintf.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
atexit.$(objext): config.h
basename.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/safe-ctype.h
bsearch.$(objext): config.h $(INCDIR)/ansidecl.h
calloc.$(objext): $(INCDIR)/ansidecl.h
choose-temp.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
clock.$(objext): config.h
concat.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
copysign.$(objext): $(INCDIR)/ansidecl.h
cp-demangle.$(objext): config.h $(INCDIR)/ansidecl.h $(srcdir)/cp-demangle.h \
	$(INCDIR)/demangle.h $(INCDIR)/dyn-string.h $(INCDIR)/getopt.h \
	$(INCDIR)/libiberty.h
cp-demint.$(objext): config.h $(INCDIR)/ansidecl.h $(srcdir)/cp-demangle.h \
	$(INCDIR)/demangle.h $(INCDIR)/libiberty.h
cplus-dem.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/demangle.h \
	$(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
dyn-string.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/dyn-string.h \
	$(INCDIR)/libiberty.h
fdmatch.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
fibheap.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/fibheap.h \
	$(INCDIR)/libiberty.h
floatformat.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/floatformat.h \
	$(INCDIR)/libiberty.h
fnmatch.$(objext): config.h $(INCDIR)/fnmatch.h $(INCDIR)/safe-ctype.h
getcwd.$(objext): config.h
getopt.$(objext): config.h $(INCDIR)/getopt.h
getopt1.$(objext): config.h $(INCDIR)/getopt.h
getpagesize.$(objext): config.h
getpwd.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
getruntime.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
hashtab.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/hashtab.h \
	$(INCDIR)/libiberty.h
hex.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/safe-ctype.h
lbasename.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/filenames.h \
	$(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
lrealpath.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
make-relative-prefix.$(objext): config.h $(INCDIR)/ansidecl.h \
	$(INCDIR)/libiberty.h
make-temp-file.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
md5.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/md5.h
memchr.$(objext): $(INCDIR)/ansidecl.h
memcmp.$(objext): $(INCDIR)/ansidecl.h
memcpy.$(objext): $(INCDIR)/ansidecl.h
memmove.$(objext): $(INCDIR)/ansidecl.h
mempcpy.$(objext): $(INCDIR)/ansidecl.h
memset.$(objext): $(INCDIR)/ansidecl.h
mkstemps.$(objext): config.h $(INCDIR)/ansidecl.h
objalloc.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/objalloc.h
obstack.$(objext): config.h $(INCDIR)/obstack.h
partition.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/partition.h
pex-djgpp.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h
pex-mpw.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h
pex-msdos.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h $(INCDIR)/safe-ctype.h
pex-os2.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h
pex-unix.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h
pex-win32.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(srcdir)/pex-common.h
physmem.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
putenv.$(objext): config.h $(INCDIR)/ansidecl.h
random.$(objext): $(INCDIR)/ansidecl.h
regex.$(objext): config.h $(INCDIR)/xregex.h $(INCDIR)/xregex2.h
rename.$(objext): config.h $(INCDIR)/ansidecl.h
safe-ctype.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
setenv.$(objext): config.h $(INCDIR)/ansidecl.h
sigsetmask.$(objext): $(INCDIR)/ansidecl.h
snprintf.$(objext): $(INCDIR)/ansidecl.h
sort.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/sort.h
spaces.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
splay-tree.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/splay-tree.h
stpcpy.$(objext): $(INCDIR)/ansidecl.h
stpncpy.$(objext): $(INCDIR)/ansidecl.h
strcasecmp.$(objext): $(INCDIR)/ansidecl.h
strchr.$(objext): $(INCDIR)/ansidecl.h
strdup.$(objext): $(INCDIR)/ansidecl.h
strerror.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
strncasecmp.$(objext): $(INCDIR)/ansidecl.h
strncmp.$(objext): $(INCDIR)/ansidecl.h
strrchr.$(objext): $(INCDIR)/ansidecl.h
strsignal.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
strtod.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
strtol.$(objext): config.h $(INCDIR)/safe-ctype.h
strtoul.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
ternary.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \
	$(INCDIR)/ternary.h
vasprintf.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
vfork.$(objext): $(INCDIR)/ansidecl.h
vfprintf.$(objext): $(INCDIR)/ansidecl.h
vprintf.$(objext): $(INCDIR)/ansidecl.h
vsnprintf.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
vsprintf.$(objext): $(INCDIR)/ansidecl.h
waitpid.$(objext): config.h
xatexit.$(objext): $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
xexit.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
xmalloc.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
xmemdup.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
xstrdup.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
xstrerror.$(objext): config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
